name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_REGION: ${{ secrets.GCP_REGION }}
  IMAGE: assignment-api
  GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_key.json

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: 'latest'
        install_components: 'gke-gcloud-auth-plugin'

    - name: Install kubectl
      run: |
        sudo apt-get update
        sudo apt-get install -y kubectl

    - name: 'Decode and authenticate with GCP'
      run: |
        echo "${{ secrets.GCP_SA_KEY_B64 }}" | base64 --decode > /tmp/gcp_key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp_key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: 'Use gcloud CLI'
      run: gcloud info

    - name: Enable necessary APIs
      run: |
        apis_to_enable=(
          "compute.googleapis.com"
          "container.googleapis.com"
          "cloudresourcemanager.googleapis.com"
          "artifactregistry.googleapis.com"
        )
        for api in "${apis_to_enable[@]}"; do
          if gcloud services list --enabled --filter="name:$api" --format="value(name)" | grep -q "$api"; then
            echo "$api is already enabled"
          else
            echo "Enabling $api..."
            gcloud services enable $api || echo "Failed to enable $api, it may require manual intervention"
          fi
        done

    - name: Create Artifact Registry Repository
      run: |
        gcloud artifacts repositories create docker-repo --repository-format=docker \
        --location=${{ env.GKE_REGION }} --description="Docker repository"

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GKE_REGION }}-docker.pkg.dev --quiet

    - name: Build and Push Docker image
      env:
        AR_REGISTRY: ${{ env.GKE_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/docker-repo
      run: |
        docker build -t $AR_REGISTRY/$IMAGE:${{ github.sha }} .
        docker push $AR_REGISTRY/$IMAGE:${{ github.sha }}

    - name: Debug Authentication
      run: |
        gcloud auth list
        gcloud config list
        gcloud artifacts repositories list --location=${{ env.GKE_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init 
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
       
    - name: Terraform Plan   
      run: terraform plan -out=tfplan
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_region: ${{ secrets.GCP_REGION }}
        TF_VAR_vpc_name: "assignment-vpc"
        TF_VAR_subnet_name: "assignment-subnet"
        TF_VAR_subnet_cidr: "10.0.0.0/24"
        TF_VAR_cluster_name: "assignment-cluster"
        TF_VAR_node_pool_name: "assignment-node-pool"
        TF_VAR_node_count: "1"
        TF_VAR_machine_type: "e2-medium"
        TF_VAR_service_account_id: "assignment-sa"
        TF_VAR_k8s_namespace: "assignment"
        TF_VAR_iam_roles_to_grant: '["roles/container.developer", "roles/storage.objectViewer"]'
        TF_VAR_open_ports: '["80", "443", "3000"]'
        TF_VAR_container_image: "assignment-api"
        TF_VAR_container_version: ${{ github.sha }}
        TF_VAR_replicas: "2"

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_region: ${{ secrets.GCP_REGION }}
        TF_VAR_vpc_name: "assignment-vpc"
        TF_VAR_subnet_name: "assignment-subnet"
        TF_VAR_subnet_cidr: "10.0.0.0/24"
        TF_VAR_cluster_name: "assignment-cluster"
        TF_VAR_node_pool_name: "assignment-node-pool"
        TF_VAR_node_count: "1"
        TF_VAR_machine_type: "e2-medium"
        TF_VAR_service_account_id: "assignment-sa"
        TF_VAR_k8s_namespace: "assignment"
        TF_VAR_iam_roles_to_grant: '["roles/container.developer", "roles/storage.objectViewer"]'
        TF_VAR_open_ports: '["80", "443", "3000"]'
        TF_VAR_container_image: "assignment-api"
        TF_VAR_container_version: ${{ github.sha }}
        TF_VAR_replicas: "2"

    - name: Verify GKE Cluster Access
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_REGION }}
        kubectl get nodes

    - name: Verify API
      run: |
        LOAD_BALANCER_IP=$(kubectl get service assignment-service -n assignment -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        for i in {1..30}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$LOAD_BALANCER_IP:3000)
          if [ $response -eq 200 ]; then
            echo "API is accessible"
            exit 0
          fi
          echo "Waiting for API to become accessible... Attempt $i"
          sleep 10
        done
        echo "API did not become accessible within the timeout period"
        exit 1