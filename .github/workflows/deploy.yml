name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_REGION: ${{ secrets.GCP_REGION }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: 'latest'

    - name: 'Authenticate with GCP'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY_B64 }}'

    - name: 'Set GCP project'
      run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: Create Artifact Registry Repository
      run: |
        gcloud artifacts repositories create docker-repo --repository-format=docker \
        --location=${{ env.GKE_REGION }} --description="Docker repository"

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GKE_REGION }}-docker.pkg.dev --quiet

    - name: Build and Push Docker image
      env:
        AR_REGISTRY: ${{ env.GKE_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/docker-repo
      run: |
        docker build -t $AR_REGISTRY/${{ secrets.DOCKER_IMAGE_NAME }}:latest .
        docker push $AR_REGISTRY/${{ secrets.DOCKER_IMAGE_NAME }}:latest

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Prepare GCP Credentials
      run: |
        echo '${{ secrets.GCP_SA_KEY_B64 }}' | base64 -d > /tmp/gcp_credentials.json

    - name: Terraform Init
      run: |
        terraform init  
#           -migrate-state -force-copy \
#          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
#          -backend-config="prefix=terraform/state" \
#          -backend-config="credentials=/tmp/gcp_credentials.json"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_region: ${{ secrets.GCP_REGION }}
        TF_VAR_vpc_name: ${{ secrets.TF_VAR_VPC_NAME }}
        TF_VAR_subnet_name: ${{ secrets.TF_VAR_SUBNET_NAME }}
        TF_VAR_subnet_cidr: ${{ secrets.TF_VAR_SUBNET_CIDR }}
        TF_VAR_cluster_name: ${{ secrets.TF_VAR_CLUSTER_NAME }}
        TF_VAR_node_pool_name: ${{ secrets.TF_VAR_NODE_POOL_NAME }}
        TF_VAR_node_count: ${{ secrets.TF_VAR_NODE_COUNT }}
        TF_VAR_machine_type: ${{ secrets.TF_VAR_MACHINE_TYPE }}
        TF_VAR_service_account_id: ${{ secrets.TF_VAR_SERVICE_ACCOUNT_ID }}
        TF_VAR_k8s_namespace: ${{ secrets.TF_VAR_K8S_NAMESPACE }}
        TF_VAR_iam_roles_to_grant: ${{ secrets.TF_VAR_IAM_ROLES_TO_GRANT }}
        TF_VAR_open_ports: ${{ secrets.TF_VAR_OPEN_PORTS }}
        TF_VAR_container_image: ${{ secrets.TF_VAR_CONTAINER_IMAGE }}
        TF_VAR_replicas: ${{ secrets.TF_VAR_REPLICAS }}        

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      env:
        GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json
        TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
        TF_VAR_region: ${{ secrets.GCP_REGION }}
        TF_VAR_vpc_name: ${{ secrets.TF_VAR_VPC_NAME }}
        TF_VAR_subnet_name: ${{ secrets.TF_VAR_SUBNET_NAME }}
        TF_VAR_subnet_cidr: ${{ secrets.TF_VAR_SUBNET_CIDR }}
        TF_VAR_cluster_name: ${{ secrets.TF_VAR_CLUSTER_NAME }}
        TF_VAR_node_pool_name: ${{ secrets.TF_VAR_NODE_POOL_NAME }}
        TF_VAR_node_count: ${{ secrets.TF_VAR_NODE_COUNT }}
        TF_VAR_machine_type: ${{ secrets.TF_VAR_MACHINE_TYPE }}
        TF_VAR_service_account_id: ${{ secrets.TF_VAR_SERVICE_ACCOUNT_ID }}
        TF_VAR_k8s_namespace: ${{ secrets.TF_VAR_K8S_NAMESPACE }}
        TF_VAR_iam_roles_to_grant: ${{ secrets.TF_VAR_IAM_ROLES_TO_GRANT }}
        TF_VAR_open_ports: ${{ secrets.TF_VAR_OPEN_PORTS }}
        TF_VAR_container_image: ${{ secrets.TF_VAR_CONTAINER_IMAGE }}
        TF_VAR_replicas: ${{ secrets.TF_VAR_REPLICAS }}        
    
    - name: Verify API
      run: |
        SERVICE_IP=$(kubectl get service assignment-service -n assignment -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Service IP: $SERVICE_IP"
          
        for i in {1..60}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$SERVICE_IP)
          if [ $response -eq 200 ]; then
            echo "API is accessible"
            exit 0
          fi
          echo "Waiting for API to become accessible... Attempt $i"
          sleep 10
        done
          
        echo "API did not become accessible within the timeout period"
        kubectl get services,pods -n assignment
        exit 1    