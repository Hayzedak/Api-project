name: Deploy to GKE

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GCP_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build and Push Docker image
      env:
        IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/example-api
      run: |
        docker build -t $IMAGE_NAME:$GITHUB_SHA .
        docker push $IMAGE_NAME:$GITHUB_SHA

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
          -var="region=${{ secrets.GCP_REGION }}" \
          -var="cluster_name=${{ secrets.GKE_CLUSTER_NAME }}" \
          -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $PROJECT_ID

    - name: Update Kubernetes Deployment
      run: |
        kubectl set image deployment/example-deployment example=gcr.io/$PROJECT_ID/example-api:$GITHUB_SHA
        kubectl rollout status deployment/example-deployment

    - name: Test the API
      run: |
        ENDPOINT=$(kubectl get service example-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        response=$(curl -s http://$ENDPOINT)
        if echo $response | grep -q "current_time"; then
          echo "API test successful"
        else
          echo "API test failed"
          exit 1
        fi