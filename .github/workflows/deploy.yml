name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_REGION: ${{ secrets.GCP_REGION }}
  IMAGE: assignment-api

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: 'latest'

    - name: 'Decode and authenticate with GCP'
      run: |
        echo "${{ secrets.GCP_SA_KEY_B64 }}" | base64 --decode > /tmp/gcp_key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp_key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: 'Use gcloud CLI'
      run: gcloud info

    - name: Check and Enable Artifact Registry API
      run: |
        if gcloud services list --enabled | grep -q 'artifactregistry.googleapis.com'; then
          echo "Artifact Registry API is already enabled"
        else
          echo "Enabling Artifact Registry API..."
          gcloud services enable artifactregistry.googleapis.com
        fi

    - name: Create Artifact Registry Repository
      run: |
        gcloud artifacts repositories create docker-repo --repository-format=docker \
        --location=${{ env.GKE_REGION }} --description="Docker repository"

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GKE_REGION }}-docker.pkg.dev --quiet

    - name: Build and Push Docker image
      env:
        AR_REGISTRY: ${{ env.GKE_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/docker-repo
      run: |
        docker build -t $AR_REGISTRY/$IMAGE:${{ github.sha }} .
        docker push $AR_REGISTRY/$IMAGE:${{ github.sha }}

    - name: Debug Authentication
      run: |
        gcloud auth list
        gcloud config list
        gcloud artifacts repositories list --location=${{ env.GKE_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=assignment-bucket-tfstate" \
          -backend-config="prefix=terraform/state"

    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GCP_REGION }} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy to GKE
      env:
        AR_REGISTRY: ${{ env.GKE_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/docker-repo
      run: |
        kubectl set image deployment/assignment-deployment assignment=$AR_REGISTRY/$IMAGE:${{ github.sha }} -n assignment

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/assignment-deployment -n assignment

    - name: Verify API
      run: |
        LOAD_BALANCER_IP=$(terraform output -raw load_balancer_ip)
        for i in {1..30}; do
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$LOAD_BALANCER_IP:3000)
          if [ $response -eq 200 ]; then
            echo "API is accessible"
            exit 0
          fi
          echo "Waiting for API to become accessible... Attempt $i"
          sleep 10
        done
        echo "API did not become accessible within the timeout period"
        exit 1
